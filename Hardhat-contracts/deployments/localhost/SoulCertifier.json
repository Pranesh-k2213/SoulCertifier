{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ContractDoesNotAllowApprovals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractDoesNotAllowTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTokenAvilable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCreaterOfToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isNew",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        }
      ],
      "name": "BunchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "TokenBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "createBunch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "createBunchWithId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCreatedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c4e71d13510081a78a56d67d22d0ce3e64bec1ac935ea5a80fc519659bdb7a7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1563031",
    "logsBloom": "0x
    "blockHash": "0xad0a01583e03e4708a93c0cd9c5bd9403e05921da13546f730e84a46858c3236",
    "transactionHash": "0x7c4e71d13510081a78a56d67d22d0ce3e64bec1ac935ea5a80fc519659bdb7a7",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1563031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "localhost:4000/api/{id}"
  ],
  "numDeployments": 1,
  "solcInputHash": "a7d6326a6d76bb85e1f7afbe9167e305",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractDoesNotAllowApprovals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractDoesNotAllowTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokenAvilable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCreaterOfToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isNew\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"BunchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"createBunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"createBunchWithId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCreatedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulCertifier.sol\":\"SoulCertifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SoulCertifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nerror NotCreaterOfToken();\\r\\nerror ContractDoesNotAllowApprovals();\\r\\nerror ContractDoesNotAllowTransfer();\\r\\nerror NoTokenAvilable();\\r\\n\\r\\ncontract SoulCertifier is Context, ERC165, IERC1155, IERC1155MetadataURI {\\r\\n    // Mapping from token ID to account balances\\r\\n    mapping(uint256 => mapping(address => bool)) private _balances;\\r\\n\\r\\n    // Mapping to token Id to creaters (certificate providers)\\r\\n    mapping(uint256 => address) private _createdBy;\\r\\n\\r\\n    // To store latest token Id\\r\\n    uint256 private tokenId;\\r\\n\\r\\n    // To store uri\\r\\n    string private _uri;\\r\\n\\r\\n    event BunchCreated(address indexed by, uint256 indexed id, bool indexed isNew, address[] to);\\r\\n    event TokenBurned(address indexed account, address indexed by, uint256 indexed id);\\r\\n\\r\\n    modifier callerIsCreater(address creater, uint256 id) {\\r\\n        if (creater != _createdBy[id]) {\\r\\n            revert NotCreaterOfToken();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(string memory newUri) {\\r\\n        _uri = newUri;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // function supportedInterfaceReturn() public pure returns (bytes4) {\\r\\n    //     return type(IERC1155).interfaceId;\\r\\n    // }\\r\\n\\r\\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\\r\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\r\\n        return _balances[id][account] ? 1 : 0;\\r\\n    }\\r\\n\\r\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\r\\n\\r\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\r\\n\\r\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\r\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\r\\n        }\\r\\n\\r\\n        return batchBalances;\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address, bool) public pure override {\\r\\n        revert ContractDoesNotAllowApprovals();\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address, address) public pure override returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes memory\\r\\n    ) public pure override {\\r\\n        revert ContractDoesNotAllowTransfer();\\r\\n    }\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] memory,\\r\\n        uint256[] memory,\\r\\n        bytes memory\\r\\n    ) public pure override {\\r\\n        revert ContractDoesNotAllowTransfer();\\r\\n    }\\r\\n\\r\\n    // Function to provide certificates without specifying the tokenID\\r\\n    // It creates new tokenId\\r\\n    function createBunch(address[] memory accounts) public returns (uint256) {\\r\\n        address creater = msg.sender;\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (accounts[i] != address(0)) {\\r\\n                _balances[tokenId][accounts[i]] = true;\\r\\n                //emit TransferSingle(creater, address(0), accounts[i], tokenId, 1);\\r\\n            }\\r\\n        }\\r\\n        _createdBy[tokenId] = creater;\\r\\n        emit BunchCreated(creater, tokenId, true, accounts);\\r\\n        tokenId += 1;\\r\\n        return tokenId - 1;\\r\\n    }\\r\\n\\r\\n    // Function call with token ID to add new accounts to already exsisting certificate token\\r\\n    function createBunchWithId(address[] memory accounts, uint256 id)\\r\\n        public\\r\\n        callerIsCreater(msg.sender, id)\\r\\n    {\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (accounts[i] != address(0)) {\\r\\n                _balances[id][accounts[i]] = true;\\r\\n                //emit TransferSingle(msg.sender, address(0), accounts[i], id, 1);\\r\\n            }\\r\\n        }\\r\\n        emit BunchCreated(msg.sender, id, false, accounts);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    function burnToken(address account, uint256 id) public callerIsCreater(msg.sender, id) {\\r\\n        if (!_balances[id][account]) {\\r\\n            revert NoTokenAvilable();\\r\\n        }\\r\\n        _balances[id][account] = false;\\r\\n        emit TokenBurned(account, msg.sender, id);\\r\\n        //emit TransferSingle(msg.sender, account, address(0), id, 1);\\r\\n    }\\r\\n\\r\\n    // Getters\\r\\n    function getNextTokenId() public view returns (uint256) {\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function getCreatedBy(uint256 id) public view returns (address) {\\r\\n        return _createdBy[id];\\r\\n    }\\r\\n\\r\\n    function uri(uint256) public view override returns (string memory) {\\r\\n        return _uri;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb6ae1b88f09b91049dc2bd6b67654606d7e604f7eebf1aaa598223bd771e7314\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063a22cb4651161008c578063d1df306c11610066578063d1df306c14610249578063e985e9c514610265578063f242432a14610295578063ff46d1b6146102b1576100ce565b8063a22cb465146101df578063bc39a2e0146101fb578063caa0f92a1461022b576100ce565b8062fdd58e146100d357806301ffc9a7146101035780630e89341c146101335780632eb2c2d6146101635780634e1273f41461017f5780636bc61715146101af575b600080fd5b6100ed60048036038101906100e89190611125565b6102cd565b6040516100fa919061156e565b60405180910390f35b61011d60048036038101906101189190611282565b6103b4565b60405161012a91906114f1565b60405180910390f35b61014d600480360381019061014891906112af565b610496565b60405161015a919061150c565b60405180910390f35b61017d60048036038101906101789190610f7f565b61052a565b005b610199600480360381019061019491906111ae565b61055c565b6040516101a691906114cf565b60405180910390f35b6101c960048036038101906101c49190611165565b610675565b6040516101d6919061156e565b60405180910390f35b6101f960048036038101906101f491906110e5565b610848565b005b610215600480360381019061021091906112af565b61087a565b6040516102229190611492565b60405180910390f35b6102336108b7565b604051610240919061156e565b60405180910390f35b610263600480360381019061025e9190611125565b6108c1565b005b61027f600480360381019061027a9190610f3f565b610ab7565b60405161028c91906114f1565b60405180910390f35b6102af60048036038101906102aa919061104e565b610abf565b005b6102cb60048036038101906102c69190611226565b610af1565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561033e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103359061152e565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103a65760006103a9565b60015b60ff16905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061047f57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061048f575061048e82610cd5565b5b9050919050565b6060600380546104a590611805565b80601f01602080910402602001604051908101604052809291908181526020018280546104d190611805565b801561051e5780601f106104f35761010080835404028352916020019161051e565b820191906000526020600020905b81548152906001019060200180831161050157829003601f168201915b50505050509050919050565b6040517f0bfcf07c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081518351146105a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105999061154e565b60405180910390fd5b6000835167ffffffffffffffff8111156105bf576105be61193e565b5b6040519080825280602002602001820160405280156105ed5781602001602082028036833780820191505090505b50905060005b845181101561066a5761063a8582815181106106125761061161190f565b5b602002602001015185838151811061062d5761062c61190f565b5b60200260200101516102cd565b82828151811061064d5761064c61190f565b5b6020026020010181815250508061066390611868565b90506105f3565b508091505092915050565b60008033905060005b835181101561076d57600073ffffffffffffffffffffffffffffffffffffffff168482815181106106b2576106b161190f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461075a57600160008060025481526020019081526020016000206000868481518110610700576106ff61190f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b808061076590611868565b91505061067e565b508060016000600254815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600115156002548273ffffffffffffffffffffffffffffffffffffffff167fb875b23e1f9779779356a1c0895648558d8f96a59129d58259a14655d086bfc38660405161080f91906114ad565b60405180910390a460016002600082825461082a91906116c5565b925050819055506001600254610840919061171b565b915050919050565b6040517f8ec20b2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b33816001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461095b576040517f4403e92200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109ee576040517faa148fc000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550823373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fbfa41556980d157c24e8632dbb78958f8759a86b4acdea421f93dc7259fb55db60405160405180910390a450505050565b600092915050565b6040517f0bfcf07c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33816001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b8b576040517f4403e92200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8451811015610c7b57600073ffffffffffffffffffffffffffffffffffffffff16858281518110610bc257610bc161190f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610c685760016000808681526020019081526020016000206000878481518110610c0e57610c0d61190f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b8080610c7390611868565b915050610b8e565b5060001515833373ffffffffffffffffffffffffffffffffffffffff167fb875b23e1f9779779356a1c0895648558d8f96a59129d58259a14655d086bfc387604051610cc791906114ad565b60405180910390a450505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000610d52610d4d846115ae565b611589565b90508083825260208201905082856020860282011115610d7557610d74611972565b5b60005b85811015610da55781610d8b8882610e61565b845260208401935060208301925050600181019050610d78565b5050509392505050565b6000610dc2610dbd846115da565b611589565b90508083825260208201905082856020860282011115610de557610de4611972565b5b60005b85811015610e155781610dfb8882610f2a565b845260208401935060208301925050600181019050610de8565b5050509392505050565b6000610e32610e2d84611606565b611589565b905082815260208101848484011115610e4e57610e4d611977565b5b610e598482856117c3565b509392505050565b600081359050610e7081611a35565b92915050565b600082601f830112610e8b57610e8a61196d565b5b8135610e9b848260208601610d3f565b91505092915050565b600082601f830112610eb957610eb861196d565b5b8135610ec9848260208601610daf565b91505092915050565b600081359050610ee181611a4c565b92915050565b600081359050610ef681611a63565b92915050565b600082601f830112610f1157610f1061196d565b5b8135610f21848260208601610e1f565b91505092915050565b600081359050610f3981611a7a565b92915050565b60008060408385031215610f5657610f55611981565b5b6000610f6485828601610e61565b9250506020610f7585828601610e61565b9150509250929050565b600080600080600060a08688031215610f9b57610f9a611981565b5b6000610fa988828901610e61565b9550506020610fba88828901610e61565b945050604086013567ffffffffffffffff811115610fdb57610fda61197c565b5b610fe788828901610ea4565b935050606086013567ffffffffffffffff8111156110085761100761197c565b5b61101488828901610ea4565b925050608086013567ffffffffffffffff8111156110355761103461197c565b5b61104188828901610efc565b9150509295509295909350565b600080600080600060a0868803121561106a57611069611981565b5b600061107888828901610e61565b955050602061108988828901610e61565b945050604061109a88828901610f2a565b93505060606110ab88828901610f2a565b925050608086013567ffffffffffffffff8111156110cc576110cb61197c565b5b6110d888828901610efc565b9150509295509295909350565b600080604083850312156110fc576110fb611981565b5b600061110a85828601610e61565b925050602061111b85828601610ed2565b9150509250929050565b6000806040838503121561113c5761113b611981565b5b600061114a85828601610e61565b925050602061115b85828601610f2a565b9150509250929050565b60006020828403121561117b5761117a611981565b5b600082013567ffffffffffffffff8111156111995761119861197c565b5b6111a584828501610e76565b91505092915050565b600080604083850312156111c5576111c4611981565b5b600083013567ffffffffffffffff8111156111e3576111e261197c565b5b6111ef85828601610e76565b925050602083013567ffffffffffffffff8111156112105761120f61197c565b5b61121c85828601610ea4565b9150509250929050565b6000806040838503121561123d5761123c611981565b5b600083013567ffffffffffffffff81111561125b5761125a61197c565b5b61126785828601610e76565b925050602061127885828601610f2a565b9150509250929050565b60006020828403121561129857611297611981565b5b60006112a684828501610ee7565b91505092915050565b6000602082840312156112c5576112c4611981565b5b60006112d384828501610f2a565b91505092915050565b60006112e8838361130c565b60208301905092915050565b60006113008383611474565b60208301905092915050565b6113158161174f565b82525050565b6113248161174f565b82525050565b600061133582611657565b61133f8185611692565b935061134a83611637565b8060005b8381101561137b57815161136288826112dc565b975061136d83611678565b92505060018101905061134e565b5085935050505092915050565b600061139382611662565b61139d81856116a3565b93506113a883611647565b8060005b838110156113d95781516113c088826112f4565b97506113cb83611685565b9250506001810190506113ac565b5085935050505092915050565b6113ef81611761565b82525050565b60006114008261166d565b61140a81856116b4565b935061141a8185602086016117d2565b61142381611986565b840191505092915050565b600061143b602a836116b4565b915061144682611997565b604082019050919050565b600061145e6029836116b4565b9150611469826119e6565b604082019050919050565b61147d816117b9565b82525050565b61148c816117b9565b82525050565b60006020820190506114a7600083018461131b565b92915050565b600060208201905081810360008301526114c7818461132a565b905092915050565b600060208201905081810360008301526114e98184611388565b905092915050565b600060208201905061150660008301846113e6565b92915050565b6000602082019050818103600083015261152681846113f5565b905092915050565b600060208201905081810360008301526115478161142e565b9050919050565b6000602082019050818103600083015261156781611451565b9050919050565b60006020820190506115836000830184611483565b92915050565b60006115936115a4565b905061159f8282611837565b919050565b6000604051905090565b600067ffffffffffffffff8211156115c9576115c861193e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156115f5576115f461193e565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156116215761162061193e565b5b61162a82611986565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006116d0826117b9565b91506116db836117b9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117105761170f6118b1565b5b828201905092915050565b6000611726826117b9565b9150611731836117b9565b925082821015611744576117436118b1565b5b828203905092915050565b600061175a82611799565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156117f05780820151818401526020810190506117d5565b838111156117ff576000848401525b50505050565b6000600282049050600182168061181d57607f821691505b60208210811415611831576118306118e0565b5b50919050565b61184082611986565b810181811067ffffffffffffffff8211171561185f5761185e61193e565b5b80604052505050565b6000611873826117b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118a6576118a56118b1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b611a3e8161174f565b8114611a4957600080fd5b50565b611a5581611761565b8114611a6057600080fd5b50565b611a6c8161176d565b8114611a7757600080fd5b50565b611a83816117b9565b8114611a8e57600080fd5b5056fea2646970667358221220754eed0d8dbca6dc96aae17df8db2d767b472cfa9238377dd372a2b95d82118564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 222,
        "contract": "contracts/SoulCertifier.sol:SoulCertifier",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 226,
        "contract": "contracts/SoulCertifier.sol:SoulCertifier",
        "label": "_createdBy",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 228,
        "contract": "contracts/SoulCertifier.sol:SoulCertifier",
        "label": "tokenId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 230,
        "contract": "contracts/SoulCertifier.sol:SoulCertifier",
        "label": "_uri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}